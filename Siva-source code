import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Load data
df = pd.read_csv('news.csv')  # ensure columns: 'text', 'label'
df = df[['text', 'label']]

# Preprocessing
stop_words = set(stopwords.words('english'))
df['text'] = df['text'].astype(str).apply(lambda x: ' '.join([word for word in x.split() if word.lower() not in stop_words]))

# Train/test split
x_train, x_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)

# TF-IDF
tfidf = TfidfVectorizer(stop_words='english', max_df=0.7)
tfidf_train = tfidf.fit_transform(x_train)
tfidf_test = tfidf.transform(x_test)

# Classifier
model = PassiveAggressiveClassifier(max_iter=50)
model.fit(tfidf_train, y_train)

# Prediction and Evaluation
y_pred = model.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score * 100, 2)}%')
print('Confusion Matrix:\n', confusion_matrix(y_test, y_pred))


                                                              
